I"Á<p>In <a href="https://thatvirtualboy.com/migrating-paid-app-to-subscription-freemium-1/">Part 1</a> of this 2-part series, I discussed the differences between the different pricing strategies developers are faced with in todayâ€™s app market.</p>

<p>In this post, Iâ€™ll share some technical details on how I converted my paid app to subscription/freemium.</p>

<p>When making such a drastic change in the pricing model for your app, you need to consider how to handle existing users who have already purchased your app up-front. Some apps disregard previous buyers and force them into the subscription model moving forward. If you want to avoid your app reviews being consumed with 1-star reviews, Iâ€™d recommend against this method.</p>

<p>I chose to honor existing users by ensuring they receive the appâ€™s <em>Lifetime Subscription</em> at no additional cost. When they originally bought the app, they were agreeing to have that app and its full functionality from the get-go. Honoring this choice is not only fair, but puts the user first.</p>

<p>So how did I achieve this?</p>

<h3 id="revenuecat">RevenueCat</h3>
<p><img src="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ffiles.readme.io%2F5c97626-OG_image.png&amp;f=1&amp;nofb=1" alt="" />
By far the easiest path to implementing subscriptions is to use <a href="https://www.revenuecat.com">RevenueCat</a>. At first I didnâ€™t like the idea of relying on a 3rd party for such a crucial function in my app, but the closer you look into RC and their SDK, the more you realize itâ€™s the path of least resistance. Perhaps best of all, RevenueCat is free to use for any developer making less than $10,000 MTR (Monthly Tracked Revenue).</p>

<p>RC has a terrific <a href="https://docs.revenuecat.com/docs/getting-started">Quickstart Guide</a> which Iâ€™m not going to re-hash in this post. The combination of RCâ€™s documentation, and <a href="https://www.youtube.com/watch?v=0H2SdKf4ot0">this video walkthrough</a> from <a href="https://designcode.io/instructor/sai">Sai</a> of <a href="https://designcode.io">Design+Code</a> helped me get up and running super quick.</p>

<p>I should mention the above video utilizes RevenueCat SDK 3 so be sure to utilize RCâ€™s <a href="https://github.com/RevenueCat/purchases-ios/blob/main/Documentation.docc/V4_API_Migration_guide.md">V4 SDK documentation</a> to make any necessary adjustments if you decide to use their latest builds.</p>

<p>Once you have RevenueCat up and running in your app, you can begin handling your grandfathered users.</p>

<p>My app is a SwiftUI app with the SwiftUI App Lifecycle.</p>

<p>In my <strong>App.swift</strong> file, I built a check that validates the appâ€™s build number in the userâ€™s receipt from when they originally downloaded the app. This checks the value of <code class="highlighter-rouge">originalApplicationVersion</code> from the receipt.</p>

<script src="https://gist.github.com/thatvirtualboy/dce533c039c0b0d7f42f74e07e689cd1.js"></script>

<p>The challenge here is that user receipts arenâ€™t synced to RevenueCat until after a user either makes a purchase, or calls <code class="highlighter-rouge">restoreTransations</code> (usually handled with a <strong>Restore Purchases</strong> button)</p>
:ET