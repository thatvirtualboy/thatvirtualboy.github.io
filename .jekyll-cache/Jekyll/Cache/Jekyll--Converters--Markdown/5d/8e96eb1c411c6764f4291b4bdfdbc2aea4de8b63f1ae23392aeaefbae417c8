I"&<p>In developing <em>Artbox 2</em>, one thing I set out to accomplish was making the user experience more immersive and personable. One of the ways to achieve this is to add <em>haptic feedback</em>. Haptics are the vibration responses to the user interacting with the application. When youâ€™re buying something with Apple Pay, scrolling through a picker, or receiving confirmations and alerts - haptics are widely used in mobile apps and can greatly enhance the user experience.</p>

<p>You can read more about haptics at <a href="https://developer.apple.com/design/human-interface-guidelines/ios/user-interaction/haptics/">ï£¿ Docs</a>.</p>

<p>SwiftUI, Appleâ€™s newest coding language, includes certain haptics by default. The most notable example being the <strong>Toggle</strong>. These toggles are found all over the iPhoneâ€™s <em>Settings</em> app. Notice when you enable or disable a toggle, thereâ€™s a subtle vibration that gives you the sensation of really interacting with the software. You likely have even noticed variations of these haptics throughout iOS and across different applications and scenarios. These are due to the custom Sharpness and Intensity</p>

<p><img src="/assets/images/haptics.png" alt="" /></p>

<h3 id="adding-haptics-to-your-app">Adding Haptics to your app</h3>
<p>Adding haptics into your SwiftUI app is a simple task that gives your users that premium experience.</p>

<p>By simply declaring the <code class="language-plaintext highlighter-rouge">UINotificationFeedbackGenerator</code> in your Views, you can call multiple types of haptic alerts.</p>

<p><code class="language-plaintext highlighter-rouge">let haptic = UINotificationFeedbackGenerator()</code></p>

<p>Now letâ€™s say you want to have a custom, subtle vibration occur when an error is triggered in your app. Simply add the below line to your action:</p>

<p><code class="language-plaintext highlighter-rouge">self.haptic.notificationOccurred(.error)</code></p>

<p>Hereâ€™s an example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>if userText == ""  {
    print("Error - Text cannot be blank")
    isErrorPresented = true
    self.haptic.notificationOccurred(.error)
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">.error</code> is built into the <code class="language-plaintext highlighter-rouge">UINotificationFeedbackGenerator</code> class so it does not need to be defined manually.</p>

<p>There are more options in addition to <code class="language-plaintext highlighter-rouge">.error</code> such as<br />
<code class="language-plaintext highlighter-rouge">.warning</code><br />
<code class="language-plaintext highlighter-rouge">.success</code><br />
<code class="language-plaintext highlighter-rouge">.light</code><br />
<code class="language-plaintext highlighter-rouge">.medium</code><br />
<code class="language-plaintext highlighter-rouge">.heavy</code></p>

<p>Go ahead and play around with these to get a feeling for where they might be applicable to your app. Obviously youâ€™ll need a physical device to test as haptics canâ€™t be tested in the Xcode Simulator.</p>

<p>Appleâ€™s Documentation warns against over-doing haptics, so youâ€™ll want to use them sparingly. Take time to explore your appâ€™s interface and apply haptics where it makes the most sense.</p>

<h3 id="summary">Summary</h3>
<p>In this post you learned about <code class="language-plaintext highlighter-rouge">UINotificationFeedbackGenerator</code> and how adding different styled haptic feedback operations can greatly improve your SwiftUI app.</p>

<p>I hope you found this post useful. Thanks for stopping by!</p>
:ET